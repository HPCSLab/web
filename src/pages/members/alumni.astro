---
import NoImageHeader from "@components/composite/header/NoImageHeader.astro";
import H1Section from "@components/composite/section/H1.astro";
import ChevronListItem from "../../components/display/list/item/Chevron.astro";
import List from "../../components/display/list/list.astro";
import AlumniCard from "@components/pages/members/Alumni.astro";
import Base from "../../layouts/base/index.astro";
import { getCollection } from "astro:content";
import {
  isFacultyAlumnus,
  isNotFacultyAlumnus,
  type CollectionDataEntry,
  type Alumnus,
} from "@content";
import H2 from "@components/composite/heading/h2.astro";
const facultyAlumni = (await getCollection("alumni")).filter(isFacultyAlumnus);
const alumni = (
  (await getCollection("alumni")) as CollectionDataEntry<Alumnus>[]
).filter(isNotFacultyAlumnus);
---

<Base title="alumni" description="卒業生/退職者一覧">
  <NoImageHeader>Almuni</NoImageHeader>
  <H1Section backgroundInverted={false}>
    <H2>教員</H2>
    <List ordered={false}>
      {
        facultyAlumni.map((faculty) => (
          <ChevronListItem>{faculty.data.name}</ChevronListItem>
        ))
      }
    </List>
  </H1Section>
  <H1Section backgroundInverted={false}>
    <H2>スタッフ</H2>
    <AlumniCard
      alumni={alumni
        .filter((alumni) => alumni.data.type === "staff")
        .map((alumnus) => alumnus.data)
        .sort((a, b) => {
          var c =
            new Date(a.year, a.month - 1).getTime() -
            new Date(b.year, b.month - 1).getTime();
          return c == 0 ? a.name.localeCompare(b.name) : c;
        })}
    />
  </H1Section>
  <H1Section backgroundInverted={false}>
    <H2>博士</H2>
    <AlumniCard
      alumni={alumni
        .filter((alumni) => alumni.data.type === "doctor")
        .map((alumnus) => alumnus.data)
        .sort((a, b) => {
          var c =
            new Date(a.year, a.month - 1).getTime() -
            new Date(b.year, b.month - 1).getTime();
          return c == 0 ? a.name.localeCompare(b.name) : c;
        })}
    />
  </H1Section>
  <H1Section backgroundInverted={false}>
    <H2>修士</H2>
    <AlumniCard
      alumni={alumni
        .filter((alumni) => alumni.data.type === "master")
        .map((alumnus) => alumnus.data)
        .sort((a, b) => {
          var c =
            new Date(a.year, a.month - 1).getTime() -
            new Date(b.year, b.month - 1).getTime();
          return c == 0 ? a.name.localeCompare(b.name) : c;
        })}
    />
  </H1Section>
  <H1Section backgroundInverted={false}>
    <H2>学士</H2>
    <AlumniCard
      alumni={alumni
        .filter((alumni) => alumni.data.type === "undergraduate")
        .map((alumnus) => alumnus.data)
        .sort((a, b) => {
          var c =
            new Date(a.year, a.month - 1).getTime() -
            new Date(b.year, b.month - 1).getTime();
          return c == 0 ? a.name.localeCompare(b.name) : c;
        })}
    />
  </H1Section>
</Base>
