---
import NavDesktop from "./desktop/Nav.astro";
import HamburgerButton from "./mobile/HamburgerButton.astro";
import NavMobile from "./mobile/Nav.astro";
import logo from "./hpcs.svg";
import { Image } from "astro:assets";
import { pages } from "./sitemap";
---

<div class="root">
  <header>
    <nav class="logo">
      <a href="/"><Image src={logo} alt="HPCS Logo" /></a>
    </nav>
    <div class="nav-container">
      <div class="desktop-nav">
        <NavDesktop pages={pages} />
      </div>
      <div class="mobile-nav">
        <HamburgerButton id="drawer-toggle-button" />
      </div>
    </div>
  </header>

  <div id="fullscreen-nav-wrapper" class="fullscreen-nav-wrapper">
    <NavMobile id="fullscreen-nav" sitemap={pages} />
  </div>
</div>

<script>
  type ToggleEventHandler = (opened: boolean) => void;
  type HamburgerButton = HTMLElement & {
    addToggleEventListener: (handler: ToggleEventHandler) => void;
  };

  customElements.whenDefined("hamburger-button").then(() => {
    const drawerToggleButton = document.getElementById(
      "drawer-toggle-button"
    ) as HamburgerButton | null;

    const fullscreenNavWrapper = document.getElementById(
      "fullscreen-nav-wrapper"
    );
    const fullscreenNav = document.getElementById("fullscreen-nav");

    const body = document.getElementById("contents-wrapper");
    let scrollY = 0;
    if (drawerToggleButton && fullscreenNavWrapper && body) {
      drawerToggleButton.addToggleEventListener((opened: boolean) => {
        if (opened) {
          fullscreenNavWrapper.classList.add("fullscreen-nav-opened");

          fullscreenNav?.classList.add("show");
          scrollY = window.scrollY;
          body.style.position = "fixed";
          body.style.transform = `translateY(-${scrollY}px)`;
        } else {
          fullscreenNavWrapper.classList.remove("fullscreen-nav-opened");

          fullscreenNav?.classList.remove("show");

          body.style.position = "unset";
          window.scroll({
            behavior: "instant",
            top: scrollY,
          });
          body.style.transform = "";
        }
      });
    }
  });
</script>

<style>
  .nav-container {
    container-type: inline-size;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: end;
  }

  :root {
    --drawer-width: 14em;
    --drawer-height: 16em;
  }

  .root {
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .fullscreen-nav-wrapper {
    position: absolute;
    top: var(--header-height);
    transform: translateX(-100vw);
  }

  .fullscreen-nav-opened {
    transform: translateX(0);
  }

  header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    top: 0;
    background-color: white;
    position: sticky;
    z-index: 100;
    height: var(--header-height);
    max-height: var(--header-height);
    min-height: var(--header-height);
    color: var(--color-text-strong);
    box-shadow: 0px 6px 6px -4px rgba(0, 0, 0, 0.1);
  }

  header a:visited {
    color: var(--color-text-strong);
  }

  header a:link {
    color: var(--color-text-strong);
  }

  .logo {
    font-size: var(--font-size-2xl);
    font-weight: lighter;
    margin-left: 2rem;
    margin-block-start: 0.5em;
    margin-block-end: 0.5em;
  }

  .logo > a {
    display: block;
    padding: 0;
  }

  .logo > a > img {
    display: block;
    height: 1rem;
    width: auto;
  }

  .desktop-nav {
    height: 100%;
    display: none;
  }

  .mobile-nav {
    height: 100%;
    display: unset;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-right: 1rem;
  }

  @container (min-width: 50rem) {
    .desktop-nav {
      display: unset;
    }

    .mobile-nav {
      display: none;
    }
  }
</style>
